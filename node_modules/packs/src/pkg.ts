import { promisifyAll } from "bluebird";
import { join } from "path";
const fs = promisifyAll(require("fs"));
import * as fse from "fs-extra";

export default (surveyConfig) => {
  try {
    fs.mkdirSync(join(process.cwd(), ".packs"));
  } catch (e) {
    // .packs dir already exists
  }

  const componentNamesObj = surveyConfig.modules
    .map((m: { component: string }) => m.component)
    .reduce((a, c) => {
      a[c] = true;
      return a;
    }, {});
  const componentNames = Object.keys(componentNamesObj);
  const labels: string[] = [];

  const appSrc =
    `import { pack } from "packs-framework";\n` +
    (surveyConfig.recorder !== undefined
      ? `import recorder from "${surveyConfig.recorder}";\n`
      : `const recorder = null;\n`) +
    (surveyConfig.wrapper !== undefined
      ? `import wrapper from "${surveyConfig.wrapper}";\n`
      : `const wrapper = null;\n`) +
    componentNames
      .map((component, i) => {
        labels[i] = String.fromCharCode(65)+ String(i);
        return `import ${labels[i]} from "${component}";`;
      })
      .join("\n") +
    "\n\n" +
    `const components = {${labels.toString()}};\n` +
    `pack(components)\n` +
    ` (require("./initialState"), require("./modules"), "root", wrapper, recorder);`;

  const componentsSrc =
    componentNames
      .map((component, i) => {
        labels[i] = String.fromCharCode(65) + String(i);
        return `import ${labels[i]} from "${component}";`;
      })
      .join("\n") +
    "\n\n" +
    `module.exports = { ${labels.join(", ")} };\n`;

  const modules = surveyConfig.modules.map((m: { component: string }) => {
    return Object.assign(m, {
      componentName: m.component,
      component: labels[componentNames.indexOf(m.component)],
    });
  });
  const appJs = fs.writeFileAsync(
    join(process.cwd(), ".packs", "app.js"),
    appSrc,
    "utf8",
  );
  const componentsJs = fs.writeFileAsync(
    join(process.cwd(), ".packs", "components.js"),
    componentsSrc,
    "utf8",
  );
  const initialStateJson = fs.writeFileAsync(
    join(process.cwd(), ".packs", "initialState.json"),
    JSON.stringify(surveyConfig.initialState, null, 2),
    "utf8",
  );
  const modulesJson = fs.writeFileAsync(
    join(process.cwd(), ".packs", "modules.json"),
    JSON.stringify(modules, null, 2),
    "utf8",
  );

  let images;
  const imageSrc = join(process.cwd(), "images");
  const imageDest = join(process.cwd(), ".packs", "images");
  if (fs.existsSync(imageSrc)) {
      images = fse.copy(imageSrc, imageDest);
  } else {
      // Create an empty images directory, so that later tools will not fail
      if (!fs.existsSync(imageDest)) {
          images = fse.mkdirSync(imageDest);
      }
  }

  return Promise.all([appJs, componentsJs, initialStateJson, modulesJson, images]);
};
