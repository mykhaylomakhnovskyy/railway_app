import * as express from "express";
import * as morgan from "morgan";
import * as webpackMiddleware from "webpack-dev-middleware";
import * as webpack from "webpack";
import { join, sep } from "path";
import { promisifyAll } from "bluebird";
const fs = promisifyAll(require("fs"));
import config from "./config";
import pkg from "./pkg";

export default config(true).then(surveyConfig => {
  const PORT = process.env.PORT || 9000;

  const app = express();
  app.use(morgan("combined"));
  const imageDir = join(process.cwd(), '.packs', 'images');
  app.use('/images', express.static(imageDir));
  app.listen(PORT);
  console.log(`Serving at http://localhost:${PORT} ✌️`);
  console.log(`Serving images from ${imageDir}`);

  const compiler = webpack({
    context: process.cwd(),
    entry: [
      "babel-polyfill",
      "whatwg-fetch",
      join(process.cwd(), ".packs", "app.js")
    ],
    output: {
      filename: "app.js",
      path: "/"
    },
    module: {
      rules: [
        {
          test: /\.js$/,
          exclude: new RegExp(
            `node_modules\\${sep}(?!(${surveyConfig.components.join("|") +
              (surveyConfig.wrapper
                ? "|" + surveyConfig.wrapper
                : "")})\\${sep}).*`
          ),
          use: {
            loader: "babel-loader",
            options: {
              presets: ["env", "react", "stage-2"]
            }
          }
        },
        {
          test: /\.(txt|md)(\?v=[0-9]\.[0-9]\.[0-9])?$/,
          loader: "raw-loader"
        },
        {
          test: /\.css$/,
          use: ["style-loader", "css-loader"]
        }
      ]
    }
  });

  const instance = webpackMiddleware(compiler, {
    lazy: true,
    stats: {
      colors: true
    }
  });
  app.use(instance);

  // track component or wrapper changes for recompilation
  let components = JSON.stringify(surveyConfig.components);
  let wrapper = JSON.stringify(surveyConfig.wrapper);
  app.get("/", (req, res, next) => {
    config(true)
      .then(surveyConfig => {
        if (
          components !== JSON.stringify(surveyConfig.components) ||
          wrapper !== JSON.stringify(surveyConfig.wrapper)
        ) {
          if(!compiler.options) {
            compiler.options = <webpack.Configuration> {};
          }
          if(!compiler.options.module) {
            compiler.options.module = <webpack.Module> {};
          }
          compiler.options.module.rules[0].exclude = new RegExp(
            `node_modules\/(?!(${surveyConfig.components.join("|") +
              (surveyConfig.wrapper ? "|" + surveyConfig.wrapper : null)})\/).*`
          );
          // recompile
          instance.invalidate();
          components = JSON.stringify(surveyConfig.components);
          wrapper = JSON.stringify(surveyConfig.wrapper);
        }
        return pkg(surveyConfig);
      })
      .then(() => {
        return fs
          .readFileAsync(join(__dirname, "..", "assets", "index.html"), "utf8")
          .then(html => res.send(html));
      })
      .catch(next);
  });
});
