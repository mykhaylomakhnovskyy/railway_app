"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const webpack = require("webpack");
const fs = require("fs");
const path_1 = require("path");
const config_1 = require("./config");
const pkg_1 = require("./pkg");
const CopyWebpackPlugin = require("copy-webpack-plugin");
let surveyConfig;
config_1.default(false)
    .then(surveyConfigObj => {
    surveyConfig = surveyConfigObj;
    return pkg_1.default(surveyConfig);
})
    .then(() => {
    try {
        fs.mkdirSync(path_1.join(process.cwd(), "public"));
    }
    catch (e) {
        // public dir already exists
    }
    // create html file
    const indexHtml = fs.readFileSync(path_1.join(__dirname, "..", "assets", "index.html"), "utf8");
    fs.writeFileSync(path_1.join(process.cwd(), "public", "index.html"), indexHtml, "utf8");
    const exclusionPattern = `node_modules\/(?!(${surveyConfig.components.join("|") +
        (surveyConfig.wrapper ? "|" + surveyConfig.wrapper : "")})\/).*`;
    const exclusionRegExp = new RegExp(exclusionPattern);
    console.log("Exclusion pattern is ", exclusionPattern);
    function exclusionTest(file) {
        // file may contain backslahses in Windows, we want to convert them to forward slashes
        // so that the same pattern works on both Windows and POSIX systems.
        const normalized = file.replace(/\\/g, '/');
        const exclude = exclusionRegExp.test(normalized);
        if (!exclude) {
            console.log("Not excluding ", file);
        }
        // console.log(`Testing ${normalized} for exclusion against ${exclusionPattern}: ${rc}`);
        return exclude;
    }
    const compiler = webpack({
        context: process.cwd(),
        entry: {
            app: [
                "babel-polyfill",
                "whatwg-fetch",
                path_1.join(process.cwd(), ".packs", "app.js")
            ],
            components: path_1.join(process.cwd(), ".packs", "components.js")
        },
        output: {
            filename: "[name].js",
            path: path_1.join(process.cwd(), "public"),
            libraryTarget: "umd"
        },
        module: {
            rules: [
                {
                    test: /\.js$/,
                    exclude: exclusionTest,
                    use: {
                        loader: "babel-loader",
                        options: {
                            presets: ["env", "react", "stage-2"]
                        }
                    }
                },
                {
                    test: /\.(txt|md)(\?v=[0-9]\.[0-9]\.[0-9])?$/,
                    loader: "raw-loader"
                },
                {
                    test: /\.css$/,
                    use: ["style-loader", "css-loader"]
                }
            ]
        },
        plugins: [
            new CopyWebpackPlugin([{
                    from: path_1.join(process.cwd(), ".packs", "images"),
                    to: path_1.join(process.cwd(), "public", "images"),
                }]),
            new webpack.DefinePlugin({
                "process.env.NODE_ENV": JSON.stringify("production")
            })
        ]
    });
    compiler.run((err, stats) => {
        if (err) {
            console.error(err, err.stack);
        }
        /*console.log("Modules passed to loaders:");
        stats.compilation.modules.forEach(module=> {
            if(module.loaders && module.loaders.length) {
                console.log(`${module.context}:\t${module.loaders.map(l=>l.loader).join(', ')}`);
            }
        }); */
        console.log(stats.toString({ colors: true }));
    });
})
    .catch(err => console.error(err, err.stack));
//# sourceMappingURL=compile.js.map