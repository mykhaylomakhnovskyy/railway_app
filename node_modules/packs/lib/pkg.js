"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bluebird_1 = require("bluebird");
const path_1 = require("path");
const fs = bluebird_1.promisifyAll(require("fs"));
const fse = require("fs-extra");
exports.default = (surveyConfig) => {
    try {
        fs.mkdirSync(path_1.join(process.cwd(), ".packs"));
    }
    catch (e) {
        // .packs dir already exists
    }
    const componentNamesObj = surveyConfig.modules
        .map((m) => m.component)
        .reduce((a, c) => {
        a[c] = true;
        return a;
    }, {});
    const componentNames = Object.keys(componentNamesObj);
    const labels = [];
    const appSrc = `import { pack } from "packs-framework";\n` +
        (surveyConfig.recorder !== undefined
            ? `import recorder from "${surveyConfig.recorder}";\n`
            : `const recorder = null;\n`) +
        (surveyConfig.wrapper !== undefined
            ? `import wrapper from "${surveyConfig.wrapper}";\n`
            : `const wrapper = null;\n`) +
        componentNames
            .map((component, i) => {
            labels[i] = String.fromCharCode(65) + String(i);
            return `import ${labels[i]} from "${component}";`;
        })
            .join("\n") +
        "\n\n" +
        `const components = {${labels.toString()}};\n` +
        `pack(components)\n` +
        ` (require("./initialState"), require("./modules"), "root", wrapper, recorder);`;
    const componentsSrc = componentNames
        .map((component, i) => {
        labels[i] = String.fromCharCode(65) + String(i);
        return `import ${labels[i]} from "${component}";`;
    })
        .join("\n") +
        "\n\n" +
        `module.exports = { ${labels.join(", ")} };\n`;
    const modules = surveyConfig.modules.map((m) => {
        return Object.assign(m, {
            componentName: m.component,
            component: labels[componentNames.indexOf(m.component)],
        });
    });
    const appJs = fs.writeFileAsync(path_1.join(process.cwd(), ".packs", "app.js"), appSrc, "utf8");
    const componentsJs = fs.writeFileAsync(path_1.join(process.cwd(), ".packs", "components.js"), componentsSrc, "utf8");
    const initialStateJson = fs.writeFileAsync(path_1.join(process.cwd(), ".packs", "initialState.json"), JSON.stringify(surveyConfig.initialState, null, 2), "utf8");
    const modulesJson = fs.writeFileAsync(path_1.join(process.cwd(), ".packs", "modules.json"), JSON.stringify(modules, null, 2), "utf8");
    let images;
    const imageSrc = path_1.join(process.cwd(), "images");
    const imageDest = path_1.join(process.cwd(), ".packs", "images");
    if (fs.existsSync(imageSrc)) {
        images = fse.copy(imageSrc, imageDest);
    }
    else {
        // Create an empty images directory, so that later tools will not fail
        if (!fs.existsSync(imageDest)) {
            images = fse.mkdirSync(imageDest);
        }
    }
    return Promise.all([appJs, componentsJs, initialStateJson, modulesJson, images]);
};
//# sourceMappingURL=pkg.js.map