"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express = require("express");
const morgan = require("morgan");
const webpackMiddleware = require("webpack-dev-middleware");
const webpack = require("webpack");
const path_1 = require("path");
const bluebird_1 = require("bluebird");
const fs = bluebird_1.promisifyAll(require("fs"));
const config_1 = require("./config");
const pkg_1 = require("./pkg");
exports.default = config_1.default(true).then(surveyConfig => {
    const PORT = process.env.PORT || 9000;
    const app = express();
    app.use(morgan("combined"));
    const imageDir = path_1.join(process.cwd(), '.packs', 'images');
    app.use('/images', express.static(imageDir));
    app.listen(PORT);
    console.log(`Serving at http://localhost:${PORT} ✌️`);
    console.log(`Serving images from ${imageDir}`);
    const compiler = webpack({
        context: process.cwd(),
        entry: [
            "babel-polyfill",
            "whatwg-fetch",
            path_1.join(process.cwd(), ".packs", "app.js")
        ],
        output: {
            filename: "app.js",
            path: "/"
        },
        module: {
            rules: [
                {
                    test: /\.js$/,
                    exclude: new RegExp(`node_modules\\${path_1.sep}(?!(${surveyConfig.components.join("|") +
                        (surveyConfig.wrapper
                            ? "|" + surveyConfig.wrapper
                            : "")})\\${path_1.sep}).*`),
                    use: {
                        loader: "babel-loader",
                        options: {
                            presets: ["env", "react", "stage-2"]
                        }
                    }
                },
                {
                    test: /\.(txt|md)(\?v=[0-9]\.[0-9]\.[0-9])?$/,
                    loader: "raw-loader"
                },
                {
                    test: /\.css$/,
                    use: ["style-loader", "css-loader"]
                }
            ]
        }
    });
    const instance = webpackMiddleware(compiler, {
        lazy: true,
        stats: {
            colors: true
        }
    });
    app.use(instance);
    // track component or wrapper changes for recompilation
    let components = JSON.stringify(surveyConfig.components);
    let wrapper = JSON.stringify(surveyConfig.wrapper);
    app.get("/", (req, res, next) => {
        config_1.default(true)
            .then(surveyConfig => {
            if (components !== JSON.stringify(surveyConfig.components) ||
                wrapper !== JSON.stringify(surveyConfig.wrapper)) {
                if (!compiler.options) {
                    compiler.options = {};
                }
                if (!compiler.options.module) {
                    compiler.options.module = {};
                }
                compiler.options.module.rules[0].exclude = new RegExp(`node_modules\/(?!(${surveyConfig.components.join("|") +
                    (surveyConfig.wrapper ? "|" + surveyConfig.wrapper : null)})\/).*`);
                // recompile
                instance.invalidate();
                components = JSON.stringify(surveyConfig.components);
                wrapper = JSON.stringify(surveyConfig.wrapper);
            }
            return pkg_1.default(surveyConfig);
        })
            .then(() => {
            return fs
                .readFileAsync(path_1.join(__dirname, "..", "assets", "index.html"), "utf8")
                .then(html => res.send(html));
        })
            .catch(next);
    });
});
//# sourceMappingURL=serve.js.map