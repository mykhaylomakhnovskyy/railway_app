"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
var AWS = require('aws-sdk');
var path = require("path");
var fs = require('fs');
function uploadDir(dirPath, bucketName, surveyName, version) {
    let s3 = new AWS.S3();
    walkSync(dirPath, function (filePath, stat) {
        let bucketPath = surveyName + "/" + version + "/" + filePath.substring(dirPath.length + 1);
        bucketPath = bucketPath.replace("\\", "/");
        let params = { Bucket: bucketName, Key: bucketPath, Body: fs.readFileSync(filePath) };
        s3.putObject(params, function (err, data) {
            if (err) {
                console.log(err);
            }
            else {
                console.log('Successfully uploaded ' + bucketPath + ' to ' + bucketName);
            }
        });
    });
}
function walkSync(currentDirPath, callback) {
    fs.readdirSync(currentDirPath).forEach(function (name) {
        var filePath = path.join(currentDirPath, name);
        var stat = fs.statSync(filePath);
        if (stat.isFile()) {
            callback(filePath, stat);
        }
        else if (stat.isDirectory()) {
            walkSync(filePath, callback);
        }
    });
}
function getConfigData(initDir) {
    if (initDir == null) {
        return null;
    }
    var fileName = "aws.json";
    try {
        var searchPath = initDir + "\\" + fileName;
        var json = require(searchPath);
        return json;
    }
    catch (err) {
        var newDir = path.dirname(initDir);
        if (newDir === initDir)
            return null;
        return getConfigData(newDir);
    }
}
var dirPath = path_1.join(process.cwd(), "public");
var packPath = path_1.join(process.cwd(), ".packs");
var jsonPath = packPath + "\\initialState.json";
var configJson = getConfigData(packPath);
if (configJson == null) {
    throw "file aws.json wan't find";
}
try {
    var bucketName = configJson["bucketName"];
    var accessKeyId = configJson["accessKeyId"];
    var secretAccessKey = configJson["secretAccessKey"];
    if (accessKeyId == null || secretAccessKey == null || bucketName == null)
        throw "aws.json format is wrong";
    AWS.config.update({ region: 'us-east-2', accessKeyId: accessKeyId, secretAccessKey: secretAccessKey });
    var json = require(jsonPath);
    var surveyName = json["surveyName"];
    var version = json["surveyVersion"];
    uploadDir(dirPath, "yaeltmp", surveyName, version);
}
catch (err) {
    console.log(err);
}
//# sourceMappingURL=deploy.js.map