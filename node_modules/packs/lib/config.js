"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const bluebird_1 = require("bluebird");
const fs = bluebird_1.promisifyAll(require("fs"));
const git = bluebird_1.promisifyAll(require("simple-git")(process.cwd()));
exports.default = (local) => new Promise((resolve, reject) => {
    fs
        .readdirAsync(path_1.join(process.cwd(), "modules"))
        .then(files => {
        const sortedFiles = files
            .sort()
            .filter(filename => filename.includes(".json"));
        console.log("Module ordering:");
        sortedFiles.map((filename, i) => console.log(`${i}: ${filename}`));
        return Promise.all(sortedFiles.map(filename => {
            return fs.readFileAsync(path_1.join(process.cwd(), "modules", filename), "utf8");
        }));
    })
        .then(moduleFiles => {
        const modules = moduleFiles.map(m => JSON.parse(m));
        return Promise.all([
            Promise.resolve(modules),
            fs.readFileAsync(path_1.join(process.cwd(), "survey.json"), "utf8"),
            git.logAsync(),
            git.statusAsync()
        ]);
    })
        .then(([modules, surveyJson, commits, status]) => {
        let version = commits.latest.hash.substring(0, 7);
        if (status.not_added.length ||
            status.conflicted.length ||
            status.created.length ||
            status.deleted.length ||
            status.modified.length ||
            status.renamed.length) {
            version += "-changed";
        }
        if (local)
            version += "-local";
        const surveyObj = JSON.parse(surveyJson);
        if (!surveyObj.name)
            reject("Missing field name in survey.json");
        const surveyInfo = {
            surveyName: surveyObj.name,
            surveyVersion: version,
            surveyCreated: new Date().toJSON()
        };
        console.log("survey info: ", JSON.stringify(surveyInfo, null, 2));
        const initialState = Object.assign(surveyObj.initialState, surveyInfo);
        resolve({
            wrapper: surveyObj.wrapper,
            recorder: surveyObj.recorder,
            components: surveyObj.components,
            initialState,
            modules
        });
    })
        .catch(reject);
});
//# sourceMappingURL=config.js.map